/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * A Certificate that can be installed on Compute Nodes and can be used to
 * authenticate operations on the machine.
 *
 */
class Certificate {
  /**
   * Create a Certificate.
   * @property {string} [thumbprint] The X.509 thumbprint of the Certificate.
   * This is a sequence of up to 40 hex digits.
   * @property {string} [thumbprintAlgorithm] The algorithm used to derive the
   * thumbprint.
   * @property {string} [url] The URL of the Certificate.
   * @property {string} [state] The current state of the Certificate. Possible
   * values include: 'active', 'deleting', 'deleteFailed'
   * @property {date} [stateTransitionTime] The time at which the Certificate
   * entered its current state.
   * @property {string} [previousState] The previous state of the Certificate.
   * This property is not set if the Certificate is in its initial active
   * state. Possible values include: 'active', 'deleting', 'deleteFailed'
   * @property {date} [previousStateTransitionTime] The time at which the
   * Certificate entered its previous state. This property is not set if the
   * Certificate is in its initial Active state.
   * @property {string} [publicData] The public part of the Certificate as a
   * base-64 encoded .cer file.
   * @property {object} [deleteCertificateError] The error that occurred on the
   * last attempt to delete this Certificate. This property is set only if the
   * Certificate is in the DeleteFailed state.
   * @property {string} [deleteCertificateError.code]
   * @property {string} [deleteCertificateError.message]
   * @property {array} [deleteCertificateError.values] This list includes
   * details such as the active Pools and Compute Nodes referencing this
   * Certificate. However, if a large number of resources reference the
   * Certificate, the list contains only about the first hundred.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Certificate
   *
   * @returns {object} metadata of Certificate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Certificate',
      type: {
        name: 'Composite',
        className: 'Certificate',
        modelProperties: {
          thumbprint: {
            required: false,
            serializedName: 'thumbprint',
            type: {
              name: 'String'
            }
          },
          thumbprintAlgorithm: {
            required: false,
            serializedName: 'thumbprintAlgorithm',
            type: {
              name: 'String'
            }
          },
          url: {
            required: false,
            serializedName: 'url',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            serializedName: 'state',
            type: {
              name: 'Enum',
              allowedValues: [ 'active', 'deleting', 'deleteFailed' ]
            }
          },
          stateTransitionTime: {
            required: false,
            serializedName: 'stateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          previousState: {
            required: false,
            serializedName: 'previousState',
            type: {
              name: 'Enum',
              allowedValues: [ 'active', 'deleting', 'deleteFailed' ]
            }
          },
          previousStateTransitionTime: {
            required: false,
            serializedName: 'previousStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          publicData: {
            required: false,
            serializedName: 'publicData',
            type: {
              name: 'String'
            }
          },
          deleteCertificateError: {
            required: false,
            serializedName: 'deleteCertificateError',
            type: {
              name: 'Composite',
              className: 'DeleteCertificateError'
            }
          }
        }
      }
    };
  }
}

module.exports = Certificate;
