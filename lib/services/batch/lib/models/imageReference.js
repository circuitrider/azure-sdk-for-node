/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary A reference to an Azure Virtual Machines Marketplace Image or a
 * custom Azure Virtual Machine Image. To get the list of all Azure Marketplace
 * Image references verified by Azure Batch, see the 'List supported Images'
 * operation.
  *
 */
class ImageReference {
  /**
   * Create a ImageReference.
   * @property {string} [publisher] The publisher of the Azure Virtual Machines
   * Marketplace Image. For example, Canonical or MicrosoftWindowsServer.
   * @property {string} [offer] The offer type of the Azure Virtual Machines
   * Marketplace Image. For example, UbuntuServer or WindowsServer.
   * @property {string} [sku] The SKU of the Azure Virtual Machines Marketplace
   * Image. For example, 14.04.0-LTS or 2012-R2-Datacenter.
   * @property {string} [version] The version of the Azure Virtual Machines
   * Marketplace Image. A value of 'latest' can be specified to select the
   * latest version of an Image. If omitted, the default is 'latest'.
   * @property {string} [virtualMachineImageId] The ARM resource identifier of
   * the Virtual Machine Image. Computes Compute Nodes of the Pool will be
   * created using this custom Image. This is of the form
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}.
   * This property is mutually exclusive with other ImageReference properties.
   * The Virtual Machine Image must be in the same region and subscription as
   * the Azure Batch Account. For information about the firewall settings for
   * the Batch Compute Node agent to communicate with the Batch service see
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ImageReference
   *
   * @returns {object} metadata of ImageReference
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImageReference',
      type: {
        name: 'Composite',
        className: 'ImageReference',
        modelProperties: {
          publisher: {
            required: false,
            serializedName: 'publisher',
            type: {
              name: 'String'
            }
          },
          offer: {
            required: false,
            serializedName: 'offer',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'version',
            type: {
              name: 'String'
            }
          },
          virtualMachineImageId: {
            required: false,
            serializedName: 'virtualMachineImageId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImageReference;
