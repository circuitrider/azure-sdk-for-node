/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary The set of changes to be made to a Pool.
  *
 */
class PoolPatchParameter {
  /**
   * Create a PoolPatchParameter.
   * @property {object} [startTask] A Task to run on each Compute Node as it
   * joins the Pool. The Task runs when the Compute Node is added to the Pool
   * or when the Compute Node is restarted. If this element is present, it
   * overwrites any existing start Task. If omitted, any existing start Task is
   * left unchanged.
   * @property {string} [startTask.commandLine] The command line does not run
   * under a shell, and therefore cannot take advantage of shell features such
   * as environment variable expansion. If you want to take advantage of such
   * features, you should invoke the shell in the command line, for example
   * using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
   * the command line refers to file paths, it should use a relative path
   * (relative to the Task working directory), or use the Batch provided
   * environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   * @property {object} [startTask.containerSettings] When this is specified,
   * all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of
   * Azure Batch directories on the node) are mapped into the container, all
   * Task environment variables are mapped into the container, and the Task
   * command line is executed in the container. Files produced in the container
   * outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk,
   * meaning that Batch file APIs will not be able to access those files.
   * @property {string} [startTask.containerSettings.containerRunOptions] These
   * additional options are supplied as arguments to the "docker create"
   * command, in addition to those controlled by the Batch Service.
   * @property {string} [startTask.containerSettings.imageName] This is the
   * full Image reference, as would be specified to "docker pull". If no tag is
   * provided as part of the Image name, the tag ":latest" is used as a
   * default.
   * @property {object} [startTask.containerSettings.registry] This setting can
   * be omitted if was already provided at Pool creation.
   * @property {string} [startTask.containerSettings.registry.registryServer]
   * If omitted, the default is "docker.io".
   * @property {string} [startTask.containerSettings.registry.userName]
   * @property {string} [startTask.containerSettings.registry.password]
   * @property {string} [startTask.containerSettings.workingDirectory] The
   * default is 'taskWorkingDirectory'. Possible values include:
   * 'taskWorkingDirectory', 'containerImageDefault'
   * @property {array} [startTask.resourceFiles] Files listed under this
   * element are located in the Task's working directory.
   * @property {array} [startTask.environmentSettings]
   * @property {object} [startTask.userIdentity] If omitted, the Task runs as a
   * non-administrative user unique to the Task.
   * @property {string} [startTask.userIdentity.userName] The userName and
   * autoUser properties are mutually exclusive; you must specify one but not
   * both.
   * @property {object} [startTask.userIdentity.autoUser] The userName and
   * autoUser properties are mutually exclusive; you must specify one but not
   * both.
   * @property {string} [startTask.userIdentity.autoUser.scope] The default
   * value is Task. Possible values include: 'task', 'pool'
   * @property {string} [startTask.userIdentity.autoUser.elevationLevel] The
   * default value is nonAdmin. Possible values include: 'nonAdmin', 'admin'
   * @property {number} [startTask.maxTaskRetryCount] The Batch service retries
   * a Task if its exit code is nonzero. Note that this value specifically
   * controls the number of retries. The Batch service will try the Task once,
   * and may then retry up to this limit. For example, if the maximum retry
   * count is 3, Batch tries the Task up to 4 times (one initial try and 3
   * retries). If the maximum retry count is 0, the Batch service does not
   * retry the Task. If the maximum retry count is -1, the Batch service
   * retries the Task without limit.
   * @property {boolean} [startTask.waitForSuccess] If true and the start Task
   * fails on a Node, the Batch service retries the start Task up to its
   * maximum retry count (maxTaskRetryCount). If the Task has still not
   * completed successfully after all retries, then the Batch service marks the
   * Node unusable, and will not schedule Tasks to it. This condition can be
   * detected via the Compute Node state and failure info details. If false,
   * the Batch service will not wait for the start Task to complete. In this
   * case, other Tasks can start executing on the Compute Node while the start
   * Task is still running; and even if the start Task fails, new Tasks will
   * continue to be scheduled on the Compute Node. The default is false.
   * @property {array} [certificateReferences] A list of Certificates to be
   * installed on each Compute Node in the Pool. If this element is present, it
   * replaces any existing Certificate references configured on the Pool. If
   * omitted, any existing Certificate references are left unchanged. For
   * Windows Nodes, the Batch service installs the Certificates to the
   * specified Certificate store and location. For Linux Compute Nodes, the
   * Certificates are stored in a directory inside the Task working directory
   * and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
   * Task to query for this location. For Certificates with visibility of
   * 'remoteUser', a 'certs' directory is created in the user's home directory
   * (e.g., /home/{user-name}/certs) and Certificates are placed in that
   * directory.
   * @property {array} [applicationPackageReferences] A list of Packages to be
   * installed on each Compute Node in the Pool. Changes to Package references
   * affect all new Nodes joining the Pool, but do not affect Compute Nodes
   * that are already in the Pool until they are rebooted or reimaged. If this
   * element is present, it replaces any existing Package references. If you
   * specify an empty collection, then all Package references are removed from
   * the Pool. If omitted, any existing Package references are left unchanged.
   * @property {array} [metadata] A list of name-value pairs associated with
   * the Pool as metadata. If this element is present, it replaces any existing
   * metadata configured on the Pool. If you specify an empty collection, any
   * metadata is removed from the Pool. If omitted, any existing metadata is
   * left unchanged.
   */
  constructor() {
  }

  /**
   * Defines the metadata of PoolPatchParameter
   *
   * @returns {object} metadata of PoolPatchParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PoolPatchParameter',
      type: {
        name: 'Composite',
        className: 'PoolPatchParameter',
        modelProperties: {
          startTask: {
            required: false,
            serializedName: 'startTask',
            type: {
              name: 'Composite',
              className: 'StartTask'
            }
          },
          certificateReferences: {
            required: false,
            serializedName: 'certificateReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CertificateReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'CertificateReference'
                  }
              }
            }
          },
          applicationPackageReferences: {
            required: false,
            serializedName: 'applicationPackageReferences',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationPackageReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationPackageReference'
                  }
              }
            }
          },
          metadata: {
            required: false,
            serializedName: 'metadata',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetadataItemElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetadataItem'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = PoolPatchParameter;
