/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Execution constraints to apply to a Task.
  *
 */
class TaskConstraints {
  /**
   * Create a TaskConstraints.
   * @property {moment.duration} [maxWallClockTime] The maximum elapsed time
   * that the Task may run, measured from the time the Task starts. If the Task
   * does not complete within the time limit, the Batch service terminates it.
   * If this is not specified, there is no time limit on how long the Task may
   * run.
   * @property {moment.duration} [retentionTime] The minimum time to retain the
   * Task directory on the Compute Node where it ran, from the time it
   * completes execution. After this time, the Batch service may delete the
   * Task directory and all its contents. The default is 7 days, i.e. the Task
   * directory will be retained for 7 days unless the Compute Node is removed
   * or the Job is deleted.
   * @property {number} [maxTaskRetryCount] The maximum number of times the
   * Task may be retried. The Batch service retries a Task if its exit code is
   * nonzero. Note that this value specifically controls the number of retries
   * for the Task executable due to a nonzero exit code. The Batch service will
   * try the Task once, and may then retry up to this limit. For example, if
   * the maximum retry count is 3, Batch tries the Task up to 4 times (one
   * initial try and 3 retries). If the maximum retry count is 0, the Batch
   * service does not retry the Task after the first attempt. If the maximum
   * retry count is -1, the Batch service retries the Task without limit.
   */
  constructor() {
  }

  /**
   * Defines the metadata of TaskConstraints
   *
   * @returns {object} metadata of TaskConstraints
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskConstraints',
      type: {
        name: 'Composite',
        className: 'TaskConstraints',
        modelProperties: {
          maxWallClockTime: {
            required: false,
            serializedName: 'maxWallClockTime',
            type: {
              name: 'TimeSpan'
            }
          },
          retentionTime: {
            required: false,
            serializedName: 'retentionTime',
            type: {
              name: 'TimeSpan'
            }
          },
          maxTaskRetryCount: {
            required: false,
            serializedName: 'maxTaskRetryCount',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = TaskConstraints;
