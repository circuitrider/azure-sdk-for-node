/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @summary Options for changing the size of a Pool.
  *
 */
class PoolResizeParameter {
  /**
   * Create a PoolResizeParameter.
   * @property {number} [targetDedicatedNodes] The desired number of dedicated
   * Compute Nodes in the Pool.
   * @property {number} [targetLowPriorityNodes] The desired number of
   * low-priority Compute Nodes in the Pool.
   * @property {moment.duration} [resizeTimeout] The timeout for allocation of
   * Nodes to the Pool or removal of Compute Nodes from the Pool. The default
   * value is 15 minutes. The minimum value is 5 minutes. If you specify a
   * value less than 5 minutes, the Batch service returns an error; if you are
   * calling the REST API directly, the HTTP status code is 400 (Bad Request).
   * @property {string} [nodeDeallocationOption] Determines what to do with a
   * Compute Node and its running task(s) if the Pool size is decreasing. The
   * default value is requeue. Possible values include: 'requeue', 'terminate',
   * 'taskCompletion', 'retainedData'
   */
  constructor() {
  }

  /**
   * Defines the metadata of PoolResizeParameter
   *
   * @returns {object} metadata of PoolResizeParameter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PoolResizeParameter',
      type: {
        name: 'Composite',
        className: 'PoolResizeParameter',
        modelProperties: {
          targetDedicatedNodes: {
            required: false,
            serializedName: 'targetDedicatedNodes',
            type: {
              name: 'Number'
            }
          },
          targetLowPriorityNodes: {
            required: false,
            serializedName: 'targetLowPriorityNodes',
            type: {
              name: 'Number'
            }
          },
          resizeTimeout: {
            required: false,
            serializedName: 'resizeTimeout',
            type: {
              name: 'TimeSpan'
            }
          },
          nodeDeallocationOption: {
            required: false,
            serializedName: 'nodeDeallocationOption',
            type: {
              name: 'Enum',
              allowedValues: [ 'requeue', 'terminate', 'taskCompletion', 'retainedData' ]
            }
          }
        }
      }
    };
  }
}

module.exports = PoolResizeParameter;
